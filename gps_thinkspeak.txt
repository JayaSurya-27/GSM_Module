#include <TinyGPS++.h>
#include <SoftwareSerial.h>
#include <AltSoftSerial.h>

#define SIM_RX_PIN 17
#define SIM_TX_PIN 16
#define GPS_RX_PIN 8
#define GPS_TX_PIN 9
SoftwareSerial simSerial(SIM_RX_PIN, SIM_TX_PIN);
AltSoftSerial gpsSerial(GPS_RX_PIN, GPS_TX_PIN);

TinyGPSPlus gps;

unsigned long previousMillis = 0;
long interval = 60000;

const char* apiKey = "FZ4KI6X4RE9P41QN"; // ThingSpeak API Key

void setup() {
  Serial.begin(115200);
  simSerial.begin(115200); // Set SIM serial baud rate to 115200
  gpsSerial.begin(9600);

  // Wait for SIM module to initialize
  delay(1000);

  Serial.println("Initializing...");

  // Ensure SIM module is ready
  sendATcommand("AT", "OK", 2000);
  sendATcommand("AT+CMGF=1", "OK", 2000); // Set SMS mode to text
}


void loop() {
  while (simSerial.available()) {
    Serial.println(simSerial.readString());
  }
  while (Serial.available()) {
    simSerial.println(Serial.readString());
  }

  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis > interval) {
    previousMillis = currentMillis;
    sendGpsToThingSpeak();
  }
}

void sendGpsToThingSpeak() {
  // Read GPS data
  while (gpsSerial.available() > 0) {
    if (gps.encode(gpsSerial.read())) {
      float latitude = gps.location.lat();
      float longitude = gps.location.lng();

      Serial.print("Latitude: ");
      Serial.println(latitude, 6);
      Serial.print("Longitude: ");
      Serial.println(longitude, 6);

      // Construct URL for ThingSpeak
      String url = "GET https://api.thingspeak.com/update?api_key=";
      url += apiKey;
      url += "&field1=";
      url += String(latitude, 6);
      url += "&field2=";
      url += String(longitude, 6);

      // Send HTTP request to ThingSpeak
      sendATcommand("AT+HTTPINIT", "OK", 2000);
      sendATcommand("AT+HTTPPARA=\"CID\",1", "OK", 1000);
      sendATcommand("AT+HTTPPARA=\"URL\",\"" + url + "\"", "OK", 1000);
      sendATcommand("AT+HTTPACTION=0", "200", 10000);
      sendATcommand("AT+HTTPTERM", "OK", 1000);

      Serial.println("Data sent to ThingSpeak.");
    }
  }
}

int8_t sendATcommand(String ATcommand, String expected_answer, unsigned int timeout) {
  String response = "";
  simSerial.println(ATcommand);
  unsigned long previous = millis();
  while (millis() - previous < timeout) {
    if (simSerial.available() > 0) {
      char c = simSerial.read();
      response += c;
      if (response.indexOf(expected_answer) != -1) {
        return 1;
      }
    }
  }
  Serial.println(response);
  return 0;
}
